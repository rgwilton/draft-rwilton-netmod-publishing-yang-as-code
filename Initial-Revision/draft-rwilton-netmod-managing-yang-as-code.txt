



Network Modeling                                               R. Wilton
Internet-Draft                                                     Cisco
Intended status: Experimental                            24 October 2022
Expires: 27 April 2023


            Managing IETF YANG modules as code not documents
           draft-rwilton-netmod-managing-yang-as-code-latest

Abstract

   The document highlights some of the issues with how the IETF creates
   and manages YANG modules and proposes some alternative approaches for
   standardizing YANG modules, with an aim that some of these could
   potentially be run as a process experiment.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://rgwilton.github.io/draft-rwilton-netmod-publishing-yang-as-
   code/draft-rwilton-netmod-managing-yang-as-code.html.  Status
   information for this document may be found at
   https://datatracker.ietf.org/doc/draft-rwilton-netmod-managing-yang-
   as-code/.

   Discussion of this document takes place on the Network Modeling
   Working Group mailing list (mailto:netmod@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/netmod/.
   Subscribe at https://www.ietf.org/mailman/listinfo/netmod/.

   Source for this draft and an issue tracker can be found at
   https://github.com/rgwilton/draft-rwilton-netmod-publishing-yang-as-
   code.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 27 April 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  The Current Process for Publishing IETF YANG Modules
   4.  Benefits and Downsides of IETF Standardization Process for YANG
     4.1.  Benefits
     4.2.  Downsides
     4.3.  Alternative industry approaches
       4.3.1.  OpenConfig
   5.  Suggestions for how IETF could manage YANG
     5.1.  Take YANG modules out of RFCs
     5.2.  Maintaining stable references (IANA)
     5.3.  Ensure that models don't change at late phases of the IETF
           review cycle
     5.4.  Make use of YANG versioning and allow breaking changes.
     5.5.  Make use of YANG packages to build
     5.6.  Manage development versions of IETF YANG modules on github.
     5.7.  Living YANG documents and Living YANG bis documents.
       5.7.1.  Inter-dependency between YANG modules.
       5.7.2.  All updates to the YANG modules require a new RFC to be
               published.
       5.7.3.  YANG versioning and backwards compatibilty
       5.7.4.  Running Code
   6.  Procedures for managing YANG modules within the IETF
     6.1.  Standardizing new YANG modules within the IETF
     6.2.  Enhancing existing YANG modules with new functionality
     6.3.  Applying small fixes to IETF YANG modules
     6.4.  Living Bis Documents
     6.5.  M
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   This document proposes that the IETF tries a process experiment for
   the management and evolution of YANG modules created and published by
   the IETF.  The goal is the make the process easier and more helpful,
   allowing YANG modules to be published more quickly without losing the
   benefits of having a stable and industry respected consensus process.

   This is very much a -00 initial draft, and I'm seeking input from the
   WG as to whether these process changes make sense, input from the
   chairs as to whether these process changes are helpful.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  The Current Process for Publishing IETF YANG Modules

   IETF currently publishes YANG modules as extractable code assets
   within RFCs.  I.e., the YANG module source text is embedded directly
   in the RFC using CODE BEGINS/ENDS markers, and can be extracted via
   tooling, such as rfcstrip.  As such, the RFC is to be regarded as the
   canonical reference to any embedded YANG Modules.  However, copies of
   the YANG modules are also available in the IANA YANG Module Names
   registry, YANG Catalog, and the YangModels/yang Github repository.

   The key components of RFCs containing one or more YANG modules are
   generally:

   *  An overview of the technology that the YANG module(s) cover,

   *  High-level descriptions of key parts (e.g., containers and lists)
      of the YANG module(s),

   *  YANG tree diagram [RFC8340] output to illustrate the schema
      structure for the YANG module(s).  Note, sometimes this is
      included as snippets of the module tree diagram output,
      potentially with a full copy of the module tree ouptut in an
      appendix.

   *  The YANG module code asset(s),

   *  Relevant security considerations for using the YANG module, and

   *  Simple examples of using the YANG module, demonstrated as instance
      data in XML or JSON that conforms to the YANG module schema.

   Within the IETF, development of YANG modules is generally deferred to
   the WGs responsible for protocols, which have the necessary technical
   knowledge to ensure that the models cover the necessary protocol
   functionality.  In cases where there is no suitable WG is available,
   then development of the YANG models has come to the NETMOD WG,
   responsible for the YANG language.  In addition, there is a team of
   "YANG Doctors" of YANG language experts who perform detailed reviews
   of YANG modules during the standardization process to ensure that
   YANG modules are well modelled.

   The process for updating existing published IETF YANG modules with
   new content is similar to the IETF process for publishing new YANG
   modules.  The new additions can be put into updated revision of the
   original YANG module or as a new augmenting YANG module that only
   contains the new functionality.  If updating the original YANG module
   then the normal IETF process would be to create a bis version of the
   original YANG module RFC.  If the additions are being developed as
   augmentions in a separate extension YANG module then there is a
   choice of doing a bis version of the original YANG module RFC, or
   creating a separate RFC just for the extensions.

   Fixing errors in the YANG module is handled the same as updating the
   original YANG module via a bis version of the original YANG module
   RFC.

4.  Benefits and Downsides of IETF Standardization Process for YANG

4.1.  Benefits

   Some of the benefits of the existing IETF YANG module standardization
   process are:

   *  Domain experts help create the YANG modules

   *  The work is distributed across more WGs and individuals

   *  There is only a very gradual change to the YANG modules (due to
      the latency in the IETF standardization process)

   *  It follow the same process as for all other IETF output (i.e.,
      RFCs)

4.2.  Downsides

   There are also some downsides of the existing IETF YANG module
   standarization process:

   *  The process take a very long time to standard IETF YANG modules,
      significantly damaging market adoption.

   *  IETF YANG modules for different protocols and features are being
      develeoped smei-independently, but there are often dependencies
      between YANG modules, which are hard to manage within the current
      IETF process.

   *  There is no effective work to ensure that IETF YANG modules work
      together as a coherent network management configuration API will
      all of the extra (not protocol configuration) also modelled.

   *  The RFC errata mechanism doesn't really work effectively for YANG
      modules because accepting an errata would create an ambiguity to
      exact textual content of the YANG module for a given YANG module
      revision.  Hence, valid errata in IETF YANG modules are always
      maked as "Hold for Doc Update" waiting for a new bis version of
      the RFC to be published with an updated YANG module revision.

   *  Including the code in the RFCs imposes a lower line length limit
      that would normally be used on code assets, potentially reducing
      their readability.  E.g., if the YANG modules were not being put
      in RFCs, then I doubt that anyone would format them to anything
      less than 80 characters.

4.3.  Alternative industry approaches

4.3.1.  OpenConfig

   OpenConfig is an industry led forum for developing network-device
   specific YANG modules.  There is quite a strong functional overlap
   between OpenConfig and IETF YANG modules, but they have a taken a
   significantly different approach to solving operational state issues
   that means that the YANG modules produced by OpenConfig are broadly
   incompatible with the more approach taken by the IETF with NMDA
   [RFC8342].

   OpenConfig has also taken a different approach to how their develop
   their YANG modules.  They manage their Device YANG as a versioned set
   of modules within a single Github project.  They allow some level of
   breaking changes to the YANG modules to allow the API to evolve and
   improve more quickly, making use of Semantic Versioning to document
   where breaking changes have occurred.  New versions of the OpenConfig
   YANG github repository are pushed approximately every 3 months, where
   they ensure that all related YANG modules are updated as a cohesive
   set of modules that work together.

5.  Suggestions for how IETF could manage YANG

   This second contains some proposals on how IETF process for managing
   YANG modules could change that may be more effect that the current
   process.

5.1.  Take YANG modules out of RFCs

   The core proposal is to stop publish YANG modules verbatim in RFCs.
   YANG related RFCs would still contain the descriptive prose
   documenting the structure and meaning of the schema defined in the
   YANG modules, but the full YANG module texts and the full YANG tree
   diagrams would no longer be published in RFCs.  Instead, YANG modules
   should be managed for what they are, i.e., code assets that are used
   to build network management APIs and associated documentation.
   Hence, the RFC would only contain stable references to the code
   assets and generated tree diagrams rather than having them embedded
   directly in the document, where they cannot change.

   Hence, the proposal is that RFCs defining YANG modules would contain:

   *  An overview of the technology that the YANG module(s) cover,

   *  High-level descriptions of key parts (e.g., containers and lists)
      of the YANG module(s),

   *  Snippets of tree output that describe the structure,

   *  A stable reference to the YANG module revision associated with the
      RFC at the time of publication

   *  A stable reference to the latest bugfixed version of the YANG
      module associated with the RFC - logically the YANG module with
      errata applied.

   *  A reference to latest version of the YANG module associated with
      the RFC (held in IANA),

   *  A reference to the tree output (automatically generated)
      associated with the latest version of hte YANG module,

   *  Security considerations relevant to the use of the YANG module,

   *  Examples for using the YANG module.

   One additional minor benefit of taking the YANG module out of the RFC
   could be to increase the column length limit for IETF YANG modules
   (perhaps to something between 80 and 120 characters), which may
   faciliate a minor improvement to YANG module readability.

5.2.  Maintaining stable references (IANA)

   IANA already maintains the "YANG Module Names" Registry.

   The YANG Module Names registry contains:

   *  An entry for the latest revision of each IANA maintained YANG
      module (e.g., iana-if-types.yang)

   *  An entry for every revision of each YANG module published in an
      RFC. (e.g., there are 2 copies of ietf-interfaes.yang, published
      in [RFC7223] and [RFC8343])

   Each entry in the YANG Module Names registry has fields that include:

   *  the module name (not necessarily unique)

   *  a link to the module revision YANG module source code

   *  a reference to the RFC that contains the module.

   The proposal is to evolve the IANA registries for YANG modules to
   acheive the following goals:

   *  Allow IANA to become the permanent canonical reference for YANG
      modules associated with RFCs, both the initial revision published
      at the same time as the RFC, and any bugfix updates.

   *  Allow IANA to track all multiple YANG module revisions with for
      one RFC (i.e., if bugfixes have been applied to a YANG module).

   *  Allow IANA to provide a per RFC stable reference to the latest
      bugfixed version of a YANG module that can be embedded in the RFC.

   *  TODO - IANA should also maintain tree diagram information, but
      which revisions of other modules should the tree ouptut be
      generated from.

5.3.  Ensure that models don't change at late phases of the IETF review
      cycle

   Ideally there are implementations to validate the YANG models that
   are being standardized.  By definition these implementations must be
   done against pre-standard versions of the YANG modules.  However, the
   various IETF review processes can mean that there are changes to the
   names of data nodes, and to the overal structure of the schema before
   the final RFC gets published.

   For IETF YANG modules, they can be pre-standard for a long period of
   time, meaning that live deployments may be based around them.

   Generally, YANG encourages only backwards-compatible changes to YANG
   models, but this doesn't appy to pre-release versions.  Meaning that
   devices and clients have to manage these breaking changes (without
   the normal deprecation cycle) when moving from pre-release to
   published standard versions.

5.4.  Make use of YANG versioning and allow breaking changes.

5.5.  Make use of YANG packages to build

5.6.  Manage development versions of IETF YANG modules on github.

5.7.  Living YANG documents and Living YANG bis documents.

5.7.1.  Inter-dependency between YANG modules.

   Other industry efforts at creating common network management APIs
   take an approach of updating related version of the YANG modules at
   the time, ensure that any import dependencies are satisfied.

   YANG 1.0 and YANG 1.1 very strongly encourage only allowing
   backwards-compatible changes to YANG modules.  This is a good
   approach when modules are very stable, but has acted to slow down
   development of YANG modules within the IETF, where folks are trying
   to get them to be perfect rather than good enough.

   This makes a lot of sense whe, modules are very stable and well-
   tested, but this approach makes it much harder to make fixes to YANG
   modules.

5.7.2.  All updates to the YANG modules require a new RFC to be
        published.

   The key aspect of the description above is that the YANG module
   itself is embedded within the RFC, and hence publishing any updated
   revision of the YANG module (even for a small fix) requires a new RFC
   to be issued.

5.7.3.  YANG versioning and backwards compatibilty

   YANG 1[RFC6020] and 1.1[RFC7950] both adopt a model where the only
   changes to a module that are allowed are backwards compatible
   changes.  All non-backwards-compatible changes are disallowed, except
   via a formal deprecation and obsoletion process.  Deprecated and
   obsoleted nodes are retained in the modules.

5.7.4.  Running Code

   This is a high-level description of what the module covers.

   Although, a copy of these modules is made available in YANG Catalog
   (TODO - Ref), on Github (TODO - Ref), the canonical reference for
   these YANG modules is the RFCs containing the YANG module.  Other
   organizations (includings SDOs and Industry bodies) have moved to
   developing and maintaining YANG modules more directly as code assets
   which has allowed a more expedient development cycle.

   There are several advantages to the IETF process used to develop YANG
   modules:

   Protocol experts generally ensure that the YANG modules provide good
   configuration coverage of the protocol in.

   The IETF process of developing YANG modules has several advantages:

   The work to generate these YANG models is delegated.

   Although this approach has several benefits, i.e., following
   established practice, and wider review of the generated YANG models
   it also have several downsides.

   Historically, IETF has published YANG models as code assets embedded
   within.  TODO Introduction

6.  Procedures for managing YANG modules within the IETF

6.1.  Standardizing new YANG modules within the IETF

   New YANG modules would follow the same process that is followed
   today, with the same level of technical review and consensus check at
   each phase, with the only differnce being that the module and tree
   diagrams are referenced rather than included.

   TODO, possibly for review purposes, the tooling could include a copy
   of the YANG module and module tree ouptut in an appendix, that it
   automatically removed when the document is published.  TODO, would
   this reintroduce the line limit issue again?

6.2.  Enhancing existing YANG modules with new functionality

6.3.  Applying small fixes to IETF YANG modules

   The goal is to define a lightweight process (similar to how errata
   against RFCs are handled) should be able to apply small bugfix sized
   changes to published YANG modules.  A key observation is that
   processing errata does not require a WG or IETF last call, or IESG
   review.  The decision to approve errata is taken by the AD, judging
   the consensus of the WG, and in particular the authors of the RFC.

   The process for making fixes to IETF YANG modules (including small
   non-backwards-compatible changes) should follow an equivalent level
   of review and consensus check as for processing errata against RFCs.

   Not all WGs have to follow exactly the same process, but defining a
   common, best practice approach, should generally make it easier for
   everyone.

   An alternative process.

   The proposed experiment would use github to track.

   Errata are processed.

   The proposal is to make use of the existing.

   The existing RFC errata process can be used to track bugs against
   stable published YANG modules.

   Small fixes to published IETF YANG modules are processed in a similar
   fashion to how the IETF processes errata.  I.e., the responsible Area
   Director has authority to approve minor fixes.

   although there is also an IANA registry that eferences and.

   embedded the YANG module source in RFCs, where they cannot be updated
   without publishing a new RFC, not even for a bugfix or an errata.
   Instead, the YANG modules would only be stored in an IANA registery,
   with the draft only maintaining a reference to the latest published
   version of the YANG module associated with the RFC.

   URL to an updateable reference to the latest published version of the
   YANG modules associated with the RFC.

   If we enact this change then there are further changes that would go
   along side it:

6.4.  Living Bis Documents

   The proposal to move the YANG module.

   The draft would hold.

   IANA & Github rather than in RFCs.

6.5.  M

   One added benefit.

7.  Security Considerations

   For the purposes of this document, the pertinent security
   considerations are really about ensuring the canonical code
   references for YANG modules are stable and safe from being
   manipulated by bad actors.  When the canonical version of the YANG
   module source text was in RFCs then any copies could always be
   checked against the RFC, that never changes.

   Does IANA provide the same level of security guarantee as an RFC
   does?

8.  IANA Considerations

   TBD, probably quite a few, depending on what we do.  Once we have
   firmed up a bit within the WG, then we should consult with IANA on an
   early review to see if they are comfortable with the proposed
   experiments.

9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/rfc/rfc7950>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

9.2.  Informative References

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <https://www.rfc-editor.org/rfc/rfc6020>.

   [RFC7223]  Bjorklund, M., "A YANG Data Model for Interface
              Management", RFC 7223, DOI 10.17487/RFC7223, May 2014,
              <https://www.rfc-editor.org/rfc/rfc7223>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8340>.

   [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,
              and R. Wilton, "Network Management Datastore Architecture
              (NMDA)", RFC 8342, DOI 10.17487/RFC8342, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8342>.

   [RFC8343]  Bjorklund, M., "A YANG Data Model for Interface
              Management", RFC 8343, DOI 10.17487/RFC8343, March 2018,
              <https://www.rfc-editor.org/rfc/rfc8343>.

Acknowledgments

Author's Address

   Robert Wilton
   Cisco
   Email: rwilton@cisco.com
